generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  role         String   @default("STUDENT")
  name         String
  username     String?  @unique
  bio          String?
  university   String?
  skills       String?
  isVerified   Boolean  @default(false)
  idCardUrl    String?
  verifiedAt   DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  services      Service[]
  hireRequests  HireRequest[] @relation("BuyerHireRequests")
  studentHireRequests HireRequest[] @relation("StudentHireRequests")
  orders        Order[]
  reviews       Review[]
  notifications Notification[]
  walletEntries WalletEntry[]
  raisedDisputes Dispute[]
  refreshTokens RefreshToken[]
  sentMessages  Message[]
  messageReads  MessageRead[]

  @@map("users")
}

model Service {
  id            String   @id @default(cuid())
  ownerId       String
  title         String
  description   String
  priceCents    Int
  isActive      Boolean  @default(true)
  isTopSelection Boolean @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  owner       User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  hireRequests HireRequest[]
  orders      Order[]
  reviews     Review[]
  contracts   Contract[]

  @@map("services")
}

model HireRequest {
  id        String   @id @default(cuid())
  serviceId String
  buyerId   String
  studentId String
  message   String
  priceCents Int
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  buyer   User    @relation("BuyerHireRequests", fields: [buyerId], references: [id], onDelete: Cascade)
  student User    @relation("StudentHireRequests", fields: [studentId], references: [id], onDelete: Cascade)
  orders  Order[]
  reviews Review[]
  contract Contract?

  @@map("hire_requests")
}

model Order {
  id           String   @id @default(cuid())
  hireRequestId String?
  serviceId    String
  buyerId      String
  studentId    String
  priceCents   Int
  status       String   @default("PENDING")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  hireRequest HireRequest? @relation(fields: [hireRequestId], references: [id])
  service     Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  buyer       User        @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  student     User        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  reviews     Review[]

  @@map("orders")
}

model Review {
  id        String   @id @default(cuid())
  orderId   String
  serviceId String
  buyerId   String
  studentId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  buyer   User    @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  student User    @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model WalletEntry {
  id          String   @id @default(cuid())
  userId      String
  amountCents Int
  reason      String
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wallet_entries")
}

model Dispute {
  id          String   @id @default(cuid())
  orderId     String
  raisedById  String
  status      String
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  raisedBy User @relation(fields: [raisedById], references: [id], onDelete: Cascade)

  @@map("disputes")
}

model RefreshToken {
  id         String   @id @default(cuid())
  userId     String
  hashedToken String
  jti        String   @unique
  revoked    Boolean  @default(false)
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Contract {
  id                String   @id @default(cuid())
  hireRequestId     String   @unique
  serviceId         String
  buyerId           String
  studentId         String
  title             String
  description       String?
  deliverables      String?
  timeline          Int?
  status            String   @default("DRAFT")
  terms             String?
  priceCents        Int
  paymentStatus     String   @default("PENDING")
  progressStatus    String   @default("NOT_STARTED")
  studentPayoutCents Int      @default(0)
  platformFeeCents  Int      @default(0)
  isSignedByBuyer   Boolean  @default(false)
  isSignedByStudent Boolean  @default(false)
  signedAt          DateTime?
  paidAt            DateTime?
  paymentIntentId   String?
  progressNotes     String?
  completionNotes   String?
  releasedAt        DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  hireRequest   HireRequest @relation(fields: [hireRequestId], references: [id], onDelete: Cascade)
  service       Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  buyer         User        @relation("BuyerContracts", fields: [buyerId], references: [id], onDelete: Cascade)
  student       User        @relation("StudentContracts", fields: [studentId], references: [id], onDelete: Cascade)
  signatures    ContractSignature[]
  progressUpdates ContractProgress[] @relation("ContractProgressUpdates")

  @@map("contracts")
}

model ContractSignature {
  id         String   @id @default(cuid())
  contractId String
  userId     String
  signature  String?
  ipAddress  String?
  userAgent  String?
  signedAt   DateTime @default(now())

  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([contractId, userId])
  @@map("contract_signatures")
}

model ContractProgress {
  id         String   @id @default(cuid())
  contractId String
  userId     String
  status     String
  description String?
  notes      String?
  attachments String?
  createdAt  DateTime @default(now())

  contract   Contract @relation("ContractProgressUpdates", fields: [contractId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("contract_progress")
}
